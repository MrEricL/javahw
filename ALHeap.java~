/*****************************************************
 * class ALHeap
 * Implements a min heap using an ArrayList as underlying container
 *****************************************************/

import java.util.ArrayList;

public class ALHeap 
{
    //instance vars
    private ArrayList<Integer> _heap; //underlying container is array of Integers

    /*****************************************************
     * default constructor  ---  inits empty heap
     *****************************************************/
    public ALHeap() 
    { 
	_heap= new ArrayList<Integer>();
    }



    /*****************************************************
     * toString()  ---  overrides inherited method
     * Returns either 
     * a) a level-order traversal of the tree (simple version)
     * b) ASCII representation of the tree (bit more complicated, much more fun)
     *****************************************************/
    public String toString() 
    {
	ArrayList<Integer> temp = new ArrayList<Integer>();
	for (int f=0; f < _heap.size(); f++) temp.add(_heap.get(f));
	String ret="";
	int level=0;
	int i=0;
	int x;
	int level2;

	//SPACING STUFF
	while (temp.size()!=0){
	    for (int z =0; z < (Math.pow(2,level)); z++){
		if (temp.size()==0) break;
		ret+=temp.remove(0);
		ret+=" ";
	    }
	    level+=1;
	      ret+="\n";
	}
	level2=level;
	level=0;
	ret="";
	for (int f=0; f < _heap.size(); f++) temp.add(_heap.get(f));

	//IGNORE ABOVE

	
	
	while (temp.size()!=0){
	    int space=level2-level;
	    while (space > 0){
		ret+=" ";
		space--;
	    }
	    for (int z =0; z < (Math.pow(2,level)); z++){
		if (temp.size()==0) break;
		ret+=temp.remove(0);
		ret+=" ";
	    }
	    level+=1;
	      ret+="\n";
	}
		return ret+"\n\n\n";

    }//O(?)



    /*****************************************************
     * boolean isEmpty()
     * Returns true if no meaningful elements in heap, false otherwise
     *****************************************************/
    public boolean isEmpty() 
    { 

	return _heap.isEmpty(); 
    } //O(?)



    /*****************************************************
     * Integer peekMin()
     * Returns min value in heap
     * Postcondition: Heap remains unchanged.
     *****************************************************/
    public Integer peekMin() 
    {
	return _heap.get(0);
    } //O(?)



    /*****************************************************
     * add(Integer) 
     * Inserts an element in the heap
     * Postcondition: Tree maintains heap property.
     * Algo: 
     * 
     * 
     *****************************************************/
    public void add( Integer addVal ) 
    {
	_heap.add(addVal);
	int i = _heap.size()-1;
	int p; //parent
	if (_heap.size()==1) return;
	else{
	    while (true){
		p = ((i-1)/2);
		if (_heap.get(p) >  addVal) {
		    swap (p,i);
		    i=p;
		}
		else break;
	    }
	}

    } //O(?)



    /*****************************************************
     * removeMin()  ---  means of removing an element from heap
     * Removes and returns least element in heap.
     * Postcondition: Tree maintains heap property.
     * Algo: 
     * 
     * 
     *****************************************************/
    public Integer removeMin() {
        swap (0,_heap.size()-1);
	Integer ret = _heap.remove(_heap.size()-1);
	Integer swappy = _heap.get(0);
	
	int i = 0;
	//	int c;//child
	int min;
	while (minChildPos(i)!=-1){
	    min=minChildPos(i);
	    if (_heap.get(i) > _heap.get(min)){
		swap (i,min);	    
	    i = min;
	    }
	    else break;
	}
	return ret;
	      
    }//O(?)



    /*****************************************************
     * minChildPos(int)  ---  helper fxn for removeMin()
     * Returns index of least child, or 
     * -1 if no children, or if input pos is not in ArrayList
     * Postcondition: Tree unchanged
     *****************************************************/
    public int minChildPos( int pos ) 
    {
	//	while (_heap.size() <= pos*2+2) _heap.add(null);
	if (_heap.size() > pos*2+1 && _heap.size() > pos*2+2) return -1;
	else if (_heap.size() > pos*2+1) return pos*2+2;
	else if (_heap.size() > pos*2+2) return pos*2+1;
	else{
	    if (_heap.get(pos*2+1) <  _heap.get(pos*2+2)) return pos*2+1;
	    else return pos*2+2;
	}
	
    }//O(?)



    //************ aux helper fxns ***************
    private Integer minOf( Integer a, Integer b ) 
    {
	if ( a.compareTo(b) < 0 )
	    return a;
	else
	    return b;
    }

    //swap for an ArrayList
    private void swap( int pos1, int pos2 ) 
    {
	_heap.set( pos1, _heap.set( pos2, _heap.get(pos1) ) );	
    }
    //********************************************



    //main method for testing
    public static void main( String[] args ) 
    {


	  ALHeap pile = new ALHeap();

	  pile.add(2);
	  System.out.println(pile);
	  pile.add(4);
	  System.out.println(pile);

	  pile.add(6);
	  System.out.println(pile);
	  pile.add(8);
	  System.out.println(pile);
	  pile.add(10);
	  System.out.println(pile);
	  pile.add(1);
	  System.out.println(pile);
	  pile.add(3);
	  System.out.println(pile);
	  pile.add(5);
	  System.out.println(pile);
	  pile.add(7);
	  System.out.println(pile);
	  pile.add(9);
	  System.out.println(pile);


	  /*
	  System.out.println(pile.minChildPos(2));
	  System.out.println(pile.minChildPos(3));
	  System.out.println(pile.minChildPos(4));
	  System.out.println(pile.minChildPos(8));
	  */	  
	  
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  System.out.println("removing " + pile.removeMin() + "...");
	  System.out.println(pile);
	  /*
	  ==|============================================|===*/

    }//end main()

}//end class ALHeap
