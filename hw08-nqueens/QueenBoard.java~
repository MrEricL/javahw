/***
 * class QueenBoard
 * Generates solutions for N-Queens problem.
 * USAGE:
 * 1. Peruse. Replace "// ?" prompts with valid comments,
 * then provide general description in block comment preceding 
 * each method.
 * 2. Implement solver method.
 */

public class QueenBoard 
{
    //2D array to represent n*n chessboard
    private int[][] _board;
    private int fail=0;

    //constructor allows for specifying size
    public QueenBoard( int size ) 
    {
	_board = new int[size][size];
	for (int i =0 ; i < _board.length; i++){
	    for (int j=0; j < _board[i].length; j++){
		_board[i][j]=0;
	    }
	}

	go();
    }


    /***
     * precondition: board is filled with 0's only.
     * postcondition: 
     * If a solution is found, board shows position of N queens, 
     * returns true.
     * If no solution, board is filled with 0's, 
     * returns false.
     * ALGORITHM:
     * [...]
     */
    public boolean solve()
    {
	return false;
    }

    public void go(){
	for (int i = 0; i < _board.length; i++){
	    for (int j = 0; j < _board[0].length; j++){
		if (_board[i][j] == 0 ){
		    addQueen(i,j);
		    toP(_board);
		    System.out.println();
		}
		
	    }
	}

    }

    
    private boolean solveH( int col ) 
    {
	return false;
    }


    //print a valid placement of n queens
    public void printSolution()
    {
	/** Print board, a la toString...
	    Except:
	    all negs and 0's replaced with underscore
	    all 1's replaced with 'Q'
	*/

	String[][] x = new String[_board.length][_board[0].length];

	for (int i = 0; i < _board.length ; i ++){
	    for (int y =0; y < _board[i].length; y++){
		if (_board[i][y] > 0) x[i][y] = "Q";
		else x[i][y] = "_";
	    }
	}
	toP(x);
	System.out.println();
	
    }



    //================= YE OLDE SEPARATOR =================

    /***
     * <General description>
     * precondition: 
     * postcondition: 
     */
    private boolean addQueen(int row, int col)
    {
	// ?
	if(_board[row][col] != 0){
	    return false;
	}

	// ?
	_board[row][col] = 1;

	// ?
	int offset = 1;

	// ?
	while(col+offset < _board[row].length) {
	    // ?
	    _board[row][col+offset]--;

	    // ?
	    if( row - offset >= 0 ) {
		_board[row-offset][col+offset]--;
	    }
	    if( row + offset < _board.length ) {
		_board[row+offset][col+offset]--;
	    }
	    // ?
	    offset++;
	}

	int temp = row;
	while (temp > 0){
	    _board[temp][col]--;

	    temp--;
	}

	temp=row+1;
	while (temp <_board.length){
	    _board[temp][col]--;

	    temp++;

	}

	
	return true;
    }


    /***
     * <General description>
     * precondition: 
     * postcondition: 
     */
    private boolean removeQueen(int row, int col)
    {
	// ?
	if ( _board[row][col] != 1 ) {
	    return false;
	}
	_board[row][col] = 0;	// ?
	int offset = 1;	        // ?

	// ?
	while( col+offset < _board[row].length ) {
	    _board[row][col+offset]++;
	    if( row - offset >= 0 ) {
		_board[row-offset][col+offset]++;
	    }
	    if( row + offset < _board.length ) {
		_board[row+offset][col+offset]++;
	    }
	    offset++;
	}
	return true;
    }


    /***
     * <General description>
     * precondition: 
     * postcondition: 
     */
    public String toString() 
    {
	String ans = "";
	for( int r = 0; r < _board.length; r++ ) {
	    for( int c = 0; c < _board[0].length; c++ ) {
		ans += _board[r][c]+"\t";
	    }
	    ans += "\n";
	}
	return ans;
    }
    
    public void toP(String[][] x) 
    {
	for( int r = 0; r < x.length; r++ ) {
	    for( int c = 0; c < x[0].length; c++ ) {
		System.out.print(x[r][c]+"\t");
	    }
	    System.out.println();
	}
    }

    public void toP(int[][] x) 
    {
	for( int r = 0; r < x.length; r++ ) {
	    for( int c = 0; c < x[0].length; c++ ) {
		System.out.print(x[r][c]+"\t");
	    }
	    System.out.println();
	}
    }    

    //main method for testing...
    public static void main( String[] args )
    {
	QueenBoard b = new QueenBoard(5);
	
        System.out.println(b);

	b.printSolution();
	/*
	*/
    }//end main()
    
}//end class
